# Terraria Panel Docker Compose Configuration
# Production deployment with single-port architecture
# Author: AxiomOS
# Version: 1.0.0

version: '3.9'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: terraria-panel-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./dist:/var/www/terraria-panel/dist:ro
      - ./nginx/logs:/var/log/nginx
      - certbot-data:/var/www/certbot:ro
    depends_on:
      - backend
    networks:
      - terraria-net
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: terraria-panel-backend
    restart: always
    environment:
      - APP_ENV=production
      - SERVER_PORT=8080
      - DATABASE_TYPE=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=${DB_NAME:-terraria_panel}
      - DATABASE_USER=${DB_USER:-terraria}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    volumes:
      - ./backend/config:/app/config:ro
      - terraria-servers:/app/terraria-servers
      - terraria-worlds:/app/worlds
      - terraria-backups:/app/backups
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - terraria-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: terraria-panel-db
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME:-terraria_panel}
      - POSTGRES_USER=${DB_USER:-terraria}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=en_US.utf8 --lc-ctype=en_US.utf8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgres/backup:/backup
    networks:
      - terraria-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-terraria}"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "127.0.0.1:5432:5432"  # Only expose to localhost for management

  # Redis Cache (optional, for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: terraria-panel-redis
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - terraria-net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL Certificate Management
  certbot:
    image: certbot/certbot
    container_name: terraria-panel-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - certbot-data:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - terraria-net

  # Prometheus for Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: terraria-panel-prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - terraria-net
    ports:
      - "127.0.0.1:9090:9090"  # Only expose to localhost

  # Grafana for Visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: terraria-panel-grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - terraria-net
    ports:
      - "127.0.0.1:3000:3000"  # Only expose to localhost

networks:
  terraria-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  terraria-servers:
    driver: local
  terraria-worlds:
    driver: local
  terraria-backups:
    driver: local
  certbot-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local