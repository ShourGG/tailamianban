# Backend Dockerfile for Terraria Panel
# Multi-stage build for optimized production image
# Author: AxiomOS

FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /build

# Copy go.mod and go.sum
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags="-s -w -X main.Version=$(git describe --tags --always) -X main.BuildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" \
    -o terraria-panel \
    cmd/main.go

# Final stage
FROM alpine:latest

# Install runtime dependencies
RUN apk add --no-cache ca-certificates tzdata curl

# Create non-root user
RUN addgroup -g 1000 -S terraria && \
    adduser -u 1000 -S terraria -G terraria

# Set working directory
WORKDIR /app

# Copy binary from builder
COPY --from=builder /build/terraria-panel /app/terraria-panel

# Create necessary directories
RUN mkdir -p /app/config /app/logs /app/terraria-servers /app/worlds /app/backups && \
    chown -R terraria:terraria /app

# Switch to non-root user
USER terraria

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/api/health || exit 1

# Run the application
ENTRYPOINT ["/app/terraria-panel"]